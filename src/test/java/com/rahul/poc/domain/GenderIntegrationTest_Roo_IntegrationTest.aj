// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rahul.poc.domain;

import com.rahul.poc.domain.GenderDataOnDemand;
import com.rahul.poc.domain.GenderIntegrationTest;
import com.rahul.poc.service.GenderService;
import java.math.BigInteger;
import java.security.Principal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect GenderIntegrationTest_Roo_IntegrationTest {
    
    declare @type: GenderIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: GenderIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    private GenderDataOnDemand GenderIntegrationTest.dod;
    
    @Autowired
    GenderService GenderIntegrationTest.genderService;
    
    @Test
    public void GenderIntegrationTest.testCountAllGenders() {
        Assert.assertNotNull("Data on demand for 'Gender' failed to initialize correctly", dod.getRandomGender());
        long count = genderService.countAllGenders();
        Assert.assertTrue("Counter for 'Gender' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void GenderIntegrationTest.testFindGender() {
        Gender obj = dod.getRandomGender();
        Assert.assertNotNull("Data on demand for 'Gender' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Gender' failed to provide an identifier", id);
        obj = genderService.findGender(id);
        Assert.assertNotNull("Find method for 'Gender' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Gender' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void GenderIntegrationTest.testFindAllGenders() {
        Assert.assertNotNull("Data on demand for 'Gender' failed to initialize correctly", dod.getRandomGender());
        long count = genderService.countAllGenders();
        Assert.assertTrue("Too expensive to perform a find all test for 'Gender', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Gender> result = genderService.findAllGenders();
        Assert.assertNotNull("Find all method for 'Gender' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Gender' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void GenderIntegrationTest.testFindGenderEntries() {
        Assert.assertNotNull("Data on demand for 'Gender' failed to initialize correctly", dod.getRandomGender());
        long count = genderService.countAllGenders();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Gender> result = genderService.findGenderEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Gender' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Gender' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void GenderIntegrationTest.testSaveGender() {
        Assert.assertNotNull("Data on demand for 'Gender' failed to initialize correctly", dod.getRandomGender());
        SecurityContextHolder.getContext().setAuthentication(new Authentication() {
			
			@Override
			public String getName() {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public void setAuthenticated(boolean isAuthenticated)
					throws IllegalArgumentException {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public boolean isAuthenticated() {
				// TODO Auto-generated method stub
				return true;
			}
			
			@Override
			public Object getPrincipal() {
				return new Principal() {
					
					@Override
					public String getName() {
						return "admin";
					}
				};
			}
			
			@Override
			public Object getDetails() {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public Object getCredentials() {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public Collection<? extends GrantedAuthority> getAuthorities() {
				ArrayList<GrantedAuthority> arrayList = new ArrayList<GrantedAuthority>();
				arrayList.add(new SimpleGrantedAuthority("ROLE_ADMIN"));
				return arrayList;
			}
		});
        Gender obj = dod.getNewTransientGender(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Gender' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Gender' identifier to be null", obj.getId());
        genderService.saveGender(obj);
        Assert.assertNotNull("Expected 'Gender' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void GenderIntegrationTest.testDeleteGender() {
        Gender obj = dod.getRandomGender();
        Assert.assertNotNull("Data on demand for 'Gender' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Gender' failed to provide an identifier", id);
        obj = genderService.findGender(id);
        genderService.deleteGender(obj);
        Assert.assertNull("Failed to remove 'Gender' with identifier '" + id + "'", genderService.findGender(id));
    }
    
}
